print('Render PDM')
local camera = Camera()
camera:SetScreenSize(1024, 1024)

-- Uncomment SetFilename if you want parallel rendering of PDMdata, and
-- Use ImageSaver() commented in the end line of this file instead.
camera:SetFilename('render_pdm.jpg')

camera:LookAt(
	0,0,80,
	0,0,0,
	0,1,0,
	60
)


local pdm = LoadModule("PdmLoader")
-- 4CL8.pdb.dfi is created by running `convert_pdb_to_pdm.scn`.
local timeStep = -1 -- => load first timeStep
local coordinateName = 'Coordinate'
local migration = false

-- Uncomment if you want PDMlib's profiling support.
-- pdm:EnableProfiling(true)

pdm:Load('4CL8.pdm.dfi', timeStep, coordinateName, migration)

local pointmodel = PointModel()
local pointdata = pdm:PointData('Coordinate', 0.2) -- container name, radius
pointmodel:Create(pointdata)
pointmodel:SetShader('white.frag')

local core = LoadModule("RenderPluginSURFACE")
core:render {camera, pointmodel}

-- -- Save image for each MPI node.
-- local saver = ImageSaver()
-- local outputFilename = string.format('render_pdmlib.%06d.jpg', mpiRank());
-- local imageBuffer = saver:Save(outputFilename, camera:GetImageBuffer())

