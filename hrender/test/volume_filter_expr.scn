print('custom expression for LoadModule("VolumeFilter")')

local camera = Camera()
camera:SetScreenSize(1024, 1024)
camera:SetFilename('volume_filter_expr.jpg')

camera:LookAt(
	-50,80,80,
	40,0,0,
	0,1,0,
	60
)

local sph = LoadModule("SphLoader")
sph:Load('prs_0000002000.sph')

local filter = LoadModule("VolumeFilter")

-- Simple copy filter
local filterCode = [[

// IDX(number of components, x, y, z, current component index, w, h, d)
dst[IDX(1,x,y,z,0,width,height,depth)] = src0[IDX(1,x,y,z,0,width,height,depth)];

]]

filter:CompileOption('gcc', '-O2');
filter:Expr(sph:VolumeData(), nil, nil, nil, 1, filterCode);

local volumedata = filter:VolumeData()

local surfacer = LoadModule("VolumeToMeshData")
print(surfacer)

local isovalue = 0.0005
surfacer:Create(volumedata)
surfacer:SetIsoValue(isovalue)
surfacer:IsoSurface()

local model = PolygonModel()

local isosurface = surfacer:MeshData()

model:Create(isosurface)
model:SetShader('normal.frag')

local core = LoadModule("RenderPluginSURFACE")
core:render {camera, model}
