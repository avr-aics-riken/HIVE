print('Render pvti')

local camera = Camera()
camera:SetScreenSize(1024, 1024)
camera:SetFilename('render_pvti.jpg')

camera:LookAt(
	500,500,500,
	0,0,0,
	0,1,0,
	60
)


local vtk = LoadModule("VtkLoader")
vtk:Load('data-flow-0000180100.pvti', '/mnt/data/data/SC14/VTI/', 'p', true) -- Need to specify field name. The last param is whether apply byteswap or not.
local volume = VolumeModel()
local volumedata = vtk:VolumeData()

-- Compute laplacian
local filter = LoadModule("VolumeFilter");
filter:Laplacian(volumedata);

volume:Create(filter:VolumeData())

local analy = LoadModule("Analyzer").VolumeAnalyzer()
analy:Execute(volume)
print('volume min/max X:', analy:MinX(), analy:MaxX())
print('volume min/max Y:', analy:MinY(), analy:MaxY())
print('volume min/max Z:', analy:MinZ(), analy:MaxZ())

-- -- Create isosurface mesh
-- local surfacer = LoadModule("VolumeToMeshData")
-- local isovalue = 0.0005
-- surfacer:Create(filter:VolumeData())
-- surfacer:SetIsoValue(isovalue)
-- surfacer:IsoSurface()
--
-- local model = PolygonModel()
-- local isosurface = surfacer:MeshData()
--
-- model:Create(isosurface)
-- model:SetShader('normal.frag')
--
-- local core = LoadModule("RenderPluginSURFACE")
-- core:render {camera, model}

volume:SetShader('def_volume_raymarch4.frag')
local core = LoadModule("RenderPluginSURFACE")
core:render {camera, volume}
