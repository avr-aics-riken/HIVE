function SphereGenerator(property)
	local size = property.size
	return {
		PointData = function ()
			local gen  = PrimitiveGenerator()
			return gen:Sphere(size)
		end
	}
end

function CreatePointModel(property)
	local pm = PointModel();
	pm:Create(property.point);
	pm:SetTranslate(property.translate[1], property.translate[2], property.translate[3])
	pm:SetRotate(property.rotate[1], property.rotate[2], property.rotate[3])
	pm:SetScale(property.scale[1], property.scale[2], property.scale[3])
	pm:SetShader(property.shadername)
	local uniforms = property.Uniform
	for i,v in pairs(uniforms) do
		if v.type == 'vec4' then
			print('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')
			pm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])
		end
		if v.type == 'vec3' then
			print('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')
			pm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])
		end
		if v.type == 'vec2' then
			print('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')
			pm:SetVec2(v.name, v.value[1], v.value[2])
		end
		if v.type == 'float' then
			print('float[' .. v.name .. '] = (', v.value, ')')
			pm:SetFloat(v.name, v.value)
		end
	end
	function getModel()
		return pm
	end
	return {
		model=getModel
	}
end

function QuadGenerator(property)
	local size = {property.size[1], property.size[2]}

	return {
		MeshData = function ()
			local gen  = PrimitiveGenerator()
			return gen:Quad(size[1], size[2])
		end
	}
end

function CreatePolygonModel(property)
	local pm = PolygonModel();
	pm:Create(property.mesh);
	pm:SetTranslate(property.translate[1], property.translate[2], property.translate[3])
	pm:SetRotate(property.rotate[1], property.rotate[2], property.rotate[3])
	pm:SetScale(property.scale[1], property.scale[2], property.scale[3])
	pm:SetShader(property.shadername)

	local uniforms = property.Uniform
	for i,v in pairs(uniforms) do
		if v.type == 'vec4' then
			print('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')
			pm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])
		end
		if v.type == 'vec3' then
			print('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')
			pm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])
		end
		if v.type == 'vec2' then
			print('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')
			pm:SetVec2(v.name, v.value[1], v.value[2])
		end
		if v.type == 'float' then
			print('float[' .. v.name .. '] = (', v.value, ')')
			pm:SetFloat(v.name, v.value)
		end
	end
	function getModel()
		return pm
	end
	return {
		model=getModel
	}
end

function CreateCamera(property)
	local cam;
	print('create camera',
		property.screensize[1], property.screensize[2],
		property.filename)
	cam = Camera()
	cam:SetScreenSize(property.screensize[1], property.screensize[2])
	cam:SetFilename(property.filename)
	cam:LookAt(
		property.position[1], property.position[2], property.position[3],
		property.target[1], property.target[2], property.target[3],
		property.up[1], property.up[2], property.up[3],
		property.fov
	)

	function camera()
		return cam
	end
	return {
		camera = camera
	}
end

function Render(arg)
	local core = LoadModule("RenderPluginSURFACE")
	core:render(arg.RenderObject)
end
-- Generated by NodeEditor

local instSphereGen1 = SphereGenerator({size = 30})
local instPointModel7 = CreatePointModel({point=instSphereGen1:PointData(), translate={-80,0,0}, rotate={0,0,0}, scale={1,1,1}, shadername='gi.frag', Uniform={nil, nil, nil}})
local instPointModel6 = CreatePointModel({point=instSphereGen1:PointData(), translate={0,0,0}, rotate={0,0,0}, scale={1,1,1}, shadername='gi.frag', Uniform={nil, nil, nil}})
local instQuadGen2 = QuadGenerator({size={200,200}})
local instPolygonModel3 = CreatePolygonModel({mesh=instQuadGen2:MeshData(), translate={0,-30,0}, rotate={-90,0,0}, scale={1,1,1}, shadername='gi.frag', Uniform={nil, nil, nil}})
local instPointModel2 = CreatePointModel({point=instSphereGen1:PointData(), translate={80,0,0}, rotate={0,0,0}, scale={1,1,1}, shadername='gi.frag', Uniform={nil, nil, nil}})
local instCreateCamera4 = CreateCamera({position={0,0,-300}, target={0,0,0}, up={0,1,0}, fov = 60, screensize={512,512}, filename='output.jpg'})
local root3 = Render({RenderObject={RenderObject0=instCreateCamera4:camera(), RenderObject1=instPointModel2:model(), RenderObject2=instPolygonModel3:model(), RenderObject3=instPointModel6:model(), RenderObject4=instPointModel7:model()}})
-- Generated Footer by NodeEditor
