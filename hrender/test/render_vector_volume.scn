function CreateTransferFunctionTexture()
   -- Create 1D transfer function texture
   -- Jet color table from OSPray example
   -- r, g, b, alpha
   local tf =
        { 0         , 0           , 1 ,      0
        , 1         , 0           , 0        , 0.1
        , 0.5         ,0.5            , 0        , 0.1
        , 0         , 0.0           , 0.5        , 0.1
        , 0  , 0           , 1.0        , 0.1 }

   local width = #tf / 4
   local tfTex = GenTexture()
   tfTex:Create2D(tf, 3, width, 1); -- 3 = RGBA32F

   return tfTex;
end

local p2v = LoadModule("PointToVolume")

local pdm = LoadModule("PdmLoader")
local timeStep = -1 -- => load first timeStep
local coordinateName = 'Coordinate'
local migration = false

-- Uncomment if you want PDMlib's profiling support.
-- pdm:EnableProfiling(true)

pdm:Load('tsunami_time_140.dfi', timeStep, coordinateName, migration)
local pointdata = pdm:PointData('Coordinate', 0.5) -- container name, radius
p2v:Create(pointdata)

-- Each voxel contains velocity attribute
vel = pdm:ExtraData('Velocity')
vector_length = false
p2v:ToVolumeWithAttrib(128,128,128, vel, vector_length)

local camera = Camera()
camera:SetScreenSize(1024, 1024)
camera:SetFilename('vector_vol_image.jpg')

camera:LookAt(
	50,100,-200,
	0,0,0,
	0,1,0,
	60
)

local tftex = CreateTransferFunctionTexture()


local volume = VolumeModel()
local volumedata = p2v:VolumeData()
volume:Create(volumedata)
--volume:SetShader('def_volume.frag')
volume:SetShader('volume_vector.frag')

volume:SetTexture('u_tfTexture', tftex:ImageData())
volume:SetClampToEdge(true, true, true)
volume:SetTextureWrapping('tf_tex', true, true, true) -- CLAMP_TO_EDGE wrap mode for transfer function texture.
local colorMode = 0
-- color mode
-- 0 ... vector xyz to rgb
-- 1, 2, 3 ... x, y, z
-- 4 ... refer transfer function using vector length
volume:SetInt('u_colorMode', colorMode)

local core = LoadModule("RenderPluginSURFACE")
core:render {camera, volume}
