function SphereGenerator(property)
	local size = property.size
	return {
		PointData = function ()
			local gen  = PrimitiveGenerator()
			return gen:Sphere(size)
		end
	}
end

function CreatePointModel(property)
	local pm = PointModel();
	pm:Create(property.point);
	pm:SetTranslate(property.translate[1], property.translate[2], property.translate[3])
	pm:SetRotate(property.rotate[1], property.rotate[2], property.rotate[3])
	pm:SetScale(property.scale[1], property.scale[2], property.scale[3])
	pm:SetShader(property.shadername)
	print("prop", property.texturename)
	if property.texturename ~= nil and property.textureimg ~= nil then
		print("--------------------------")
		pm:SetTexture(property.texturename, property.textureimg)
	end

	local uniforms = property.Uniform
	for i,v in pairs(uniforms) do
		if v.type == 'vec4' then
			print('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')
			pm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])
		end
		if v.type == 'vec3' then
			print('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')
			pm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])
		end
		if v.type == 'vec2' then
			print('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')
			pm:SetVec2(v.name, v.value[1], v.value[2])
		end
		if v.type == 'float' then
			print('float[' .. v.name .. '] = (', v.value, ')')
			pm:SetFloat(v.name, v.value)
		end
	end
	function getModel()
		return pm
	end
	return {
		model=getModel
	}
end

function QuadGenerator(property)
	local size = {property.size[1], property.size[2]}

	return {
		MeshData = function ()
			local gen  = PrimitiveGenerator()
			return gen:Quad(size[1], size[2])
		end
	}
end

function CreatePolygonModel(property)
	local pm = PolygonModel();
	pm:Create(property.mesh);
	pm:SetTranslate(property.translate[1], property.translate[2], property.translate[3])
	pm:SetRotate(property.rotate[1], property.rotate[2], property.rotate[3])
	pm:SetScale(property.scale[1], property.scale[2], property.scale[3])
	pm:SetShader(property.shadername)

	local uniforms = property.Uniform
	for i,v in pairs(uniforms) do
		if v.type == 'vec4' then
			print('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')
			pm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])
		end
		if v.type == 'vec3' then
			print('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')
			pm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])
		end
		if v.type == 'vec2' then
			print('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')
			pm:SetVec2(v.name, v.value[1], v.value[2])
		end
		if v.type == 'float' then
			print('float[' .. v.name .. '] = (', v.value, ')')
			pm:SetFloat(v.name, v.value)
		end
	end
	function getModel()
		return pm
	end
	return {
		model=getModel
	}
end

function CreateCamera(property)
	local cam;	
	print('create camera',
		property.screensize[1], property.screensize[2],
		property.filename)
	cam = Camera()
	cam:SetScreenSize(property.screensize[1], property.screensize[2])
	cam:SetFilename(property.filename)
	cam:LookAt(
		property.position[1], property.position[2], property.position[3],
		property.target[1], property.target[2], property.target[3],
		property.up[1], property.up[2], property.up[3],
		property.fov
	)
	
	function camera()
		return cam
	end
	return {
		camera = camera
	}
end

function Render(arg)
	local core = LoadModule("RenderPluginSURFACE")
	core:render(arg.RenderObject)
end
-- Generated by NodeEditor

-- Create an array of material as texture.
-- 8 pixel(RGBA32F) width x # of materials as height
local mattex = GenTexture()

local mattextable = {}
local numMaterials = 4
local mattexWidth = 8
local glossiness = {0.0, 0.01, 0.1, 0.5}

-- Memory layout of material info.
-- [0:4]   3 floats: diffuse color, 1 float: unused
-- [4:7]   3 floats: reflection color, 1 float: reflection glossiness([0,1])
-- [8:11]  3 floats: refraction color, 1 float: refraction glossiness([0,1])
-- [12:15] fresnel(float), ior(float), 2 floats: unused
-- [16:19] 3 floats: emission, 1 float: unused
-- [20:31] reserved.
for j = 1, numMaterials do 

	-- 0:3   diffuse(vec3, alpha not used)
   table.insert(mattextable, 0);
   table.insert(mattextable, 0);
   table.insert(mattextable, 0);
	table.insert(mattextable, 0.0);

	-- 4:7   reflection and glossiness(vec4)
   table.insert(mattextable, 1.0);
   table.insert(mattextable, 1.0);
   table.insert(mattextable, 1.0);
   table.insert(mattextable, glossiness[j]);

	-- 8:11  refraction and glossiness(vec4)
   table.insert(mattextable, 0.0);
   table.insert(mattextable, 0.0);
   table.insert(mattextable, 0.0);
   table.insert(mattextable, 0.0);

	-- 12:15 fresnel and ior(vec2, last 2 floats not used)
   table.insert(mattextable, 0.0);
   table.insert(mattextable, 1.6);
   table.insert(mattextable, 0.0);
   table.insert(mattextable, 0.0);

	-- 16:19 emission(vec3, alpha not used)
   table.insert(mattextable, 0.0);
   table.insert(mattextable, 0.0);
   table.insert(mattextable, 0.0);
   table.insert(mattextable, 0.0);

	-- fill unsed area(20:31)
	for i = 20, 31 do
		table.insert(mattextable, 0.0);
	end

end

mattex:Create2D(mattextable, 3, mattexWidth, numMaterials); -- 3 = RGBA32F
local matimg = mattex:ImageData()

-- Generate too big sphere as an environment
local gen  = PrimitiveGenerator()
local envmap = gen:Sphere(1000000)

local pm0 = PointModel();
pm0:Create(envmap);
pm0:SetShader("envmap.frag");

-- load from file
local loader = ImageLoader()
local isloaded = loader:Load("ibl.jpg")
print('Texture Load = ' .. tostring(isloaded))
local img = loader:ImageData()

pm0:SetTexture('mytex0', img) -- Bind

local instSphereGen1 = SphereGenerator({size = 30})

local instPointModel7 = CreatePointModel({point=instSphereGen1:PointData(), translate={0,0,0}, rotate={0,0,0}, scale={3,3,3}, shadername='pbs.frag', texturename="pbs_envtex", textureimg=img, Uniform={nil}})
instPointModel7:model():SetFloat("matid", 0)
instPointModel7:model():SetTexture("pbs_envtex", img)
instPointModel7:model():SetTexture("pbs_mattex", matimg)
instPointModel7:model():SetFloat("pbs_num_materials", numMaterials)
instPointModel7:model():SetFloat("pbs_num_lights", 0)
instPointModel7:model():SetTextureFiltering("pbs_mattex", false)

local instCreateCamera4 = CreateCamera({position={100,100,-300}, target={0,0,0}, up={0,1,0}, fov = 60, screensize={1024, 1024}, filename='render_ibl.jpg'})

-- local root3 = Render({RenderObject={RenderObject0=instCreateCamera4:camera(), RenderObject3=instPointModel6:model(), pm0}})
local root3 = Render({RenderObject={RenderObject0=instCreateCamera4:camera(), RenderObject4=instPointModel7:model(), pm0}})

-- Generated Footer by NodeEditor
