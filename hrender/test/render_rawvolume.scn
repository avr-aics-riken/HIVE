local core = LoadModule("RenderPluginSURFACE")

print('Render raw vol')

local camera = Camera()
camera:SetScreenSize(512, 512)
--camera:ClearColor(1, 1, 1, 1)
camera:ClearColor(0, 0, 0, 1)
camera:SetFilename('HIVE2018_render_rawvol_image_BG_0001.jpg')

camera:LookAt(
	350,350,350,
	0,0,0,
	0,1,0,
	60
)

function JetTransferFunctionTexture()
   -- Create 1D transfer function texture
   -- Jet color table from OSPray example
   -- r, g, b, alpha
   local tf =
        { 0         , 0           , 0.562493 , 1.0
        , 0         , 0           , 1        , 1.0
        , 0         , 1           , 1        , 1.0
        , 0.500008  , 1           , 0.500008 , 1.0
        , 1         , 1           , 0        , 1.0
        , 1         , 0           , 0        , 1.0
        , 0.500008  , 0           , 0        , 1.0 }

   local width = #tf / 4
   local tfTex = GenTexture()
   tfTex:Create2D(tf, 3, width, 1); -- 3 = RGBA32F

   return tfTex;
end

function IceFireTransferFunctionTexture()
   -- Create 1D transfer function texture
   -- Ice/fire color table from OSPray example
   -- r, g, b, alpha
   local tf =
        { 0         , 0           , 0           , 1.0
        , 0         , 0.120394    , 0.302678    , 1.0
        , 0         , 0.216587    , 0.524575    , 1.0
        , 0.0552529 , 0.345022    , 0.659495    , 1.0
        , 0.128054  , 0.492592    , 0.720287    , 1.0
        , 0.188952  , 0.641306    , 0.792096    , 1.0
        , 0.327672  , 0.784939    , 0.873426    , 1.0
        , 0.60824   , 0.892164    , 0.935546    , 1.0
        , 0.881376  , 0.912184    , 0.818097    , 1.0
        , 0.9514    , 0.835615    , 0.449271    , 1.0
        , 0.904479  , 0.690486    , 0           , 1.0
        , 0.854063  , 0.510857    , 0           , 1.0
        , 0.777096  , 0.330175    , 0.000885023 , 1.0
        , 0.672862  , 0.139086    , 0.00270085  , 1.0
        , 0.508812  , 0           , 0           , 1.0
        , 0.299413  , 0.000366217 , 0.000549325 , 1.0
        , 0.0157473 , 0.00332647  , 0           , 1.0 }

   local width = #tf / 4
   local tfTex = GenTexture()
   tfTex:Create2D(tf, 3, width, 1); -- 3 = RGBA32F

   return tfTex;
end

function CoolToWarmTransferFunctionTexture()
   -- Create 1D transfer function texture
   -- Cool to warm color table from OSPray example
   -- r, g, b, alpha
   local tf =
        { 0.231373  , 0.298039    , 0.752941    , 1.0
        , 0.865003  , 0.865003    , 0.865003    , 1.0
        , 0.705882  , 0.0156863   , 0.14902     , 1.0 }

   local width = #tf / 4
   local tfTex = GenTexture()
   tfTex:Create2D(tf, 3, width, 1); -- 3 = RGBA32F

   return tfTex;
end

function BlueToRedTransferFunctionTexture()
   -- Create 1D transfer function texture
   -- r, g, b, alpha
   local tf =
        { 0         , 0           , 1           , 1.0
        , 1         , 0           , 0           , 1.0 }

   local width = #tf / 4
   local tfTex = GenTexture()
   tfTex:Create2D(tf, 3, width, 1); -- 3 = RGBA32F

   return tfTex;
end

local tftex = JetTransferFunctionTexture()
-- local tftex = IceFireTransferFunctionTexture()
-- local tftex = CoolToWarmTransferFunctionTexture()
-- local tftex = BlueToRedTransferFunctionTexture()

local loader = LoadModule("RawVolumeLoader")
-- .raw volume file can be found at http://ospray.github.io/demos.html for example.
loader:Load('input-256x256x256-float.raw', 256, 256, 256, 1, 'float')

print ('Width:  ', loader:Width())
print ('Height: ', loader:Height())
print ('Depth:  ', loader:Depth())

local volume = VolumeModel()
local volumedata = loader:VolumeData()
volume:Create(volumedata)

local analy = LoadModule("Analyzer").VolumeAnalyzer()
analy:Execute(volumedata)
print('volume min/max X:', analy:MinX(), analy:MaxX())
print('volume min/max Y:', analy:MinY(), analy:MaxY())
print('volume min/max Z:', analy:MinZ(), analy:MaxZ())

volume:SetShader('def_volume_raymarch_tf.frag')
volume:SetTexture('tf_tex', tftex:ImageData())
volume:SetClampToEdge(true, true, true)
volume:SetTextureWrapping('tf_tex', true, true, true) -- CLAMP_TO_EDGE wrap mode for transfer function texture.
volume:SetFloat('tf_min', 0.0)
volume:SetFloat('tf_max', 1.0)
volume:SetFloat('tf_opacity', 0.01)

core:render {camera, volume}
