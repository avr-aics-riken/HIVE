print('Render HDM')

local camera = Camera()
camera:SetScreenSize(1024, 1024)
camera:SetFilename('image_hdm.jpg')

camera:LookAt(
	200,200,200,
	0,0,0,
	0,1,0,
	60
)

function JetTransferFunctionTexture()
   -- Create 1D transfer function texture
   -- Jet color table from OSPray example
   -- r, g, b, alpha
   local tf = 
        { 0         , 0           , 0.562493 , 1.0
        , 0         , 0           , 1        , 1.0
        , 0         , 1           , 1        , 1.0
        , 0.500008  , 1           , 0.500008 , 1.0
        , 1         , 1           , 0        , 1.0
        , 1         , 0           , 0        , 1.0
        , 0.500008  , 0           , 0        , 1.0 }

   local width = #tf / 4
   local tfTex = GenTexture()
   tfTex:Create2D(tf, 3, width, 1); -- 3 = RGBA32F

   return tfTex;
end


local hdm = LoadModule("HdmLoader")
hdm:Init('hdm_out/cellid.bcm', 'hdm_out/data.bcm')

-- field name, field type, components(1=scalar, 3=vector), stepNo
local volumedata = hdm:LoadField("Tmp32", "Float32", 1, 0)
print("volumedata", volumedata)

local volume = SparseVolumeModel()
volume:Create(volumedata)

local tftex = JetTransferFunctionTexture()
volume:SetShader('def_volume_raymarch_tf.frag')
volume:SetTexture('tf_tex', tftex:ImageData())
volume:SetClampToEdge(true, true, true)
volume:SetTextureWrapping('tf_tex', true, true, true) -- CLAMP_TO_EDGE wrap mode for transfer function texture.
volume:SetFloat('tf_min', -10.5)
volume:SetFloat('tf_max', 400.0)
volume:SetFloat('tf_opacity', 0.0025)

local core = LoadModule("RenderPluginSURFACE")
core:render {camera, volume}
